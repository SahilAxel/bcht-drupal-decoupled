<?php

use Drupal\core\Url;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
use Drupal\block\Entity\Block;
use \Drupal\Core\Template\Attribute;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bcht_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bcht_theme_suggestions_node_alter(array &$suggestions, array $variables)
{
  $viewMode = $variables['elements']['#view_mode'];
  $suggestions[] = 'node__view_mode__' . $viewMode;
}

/**
 * Implements hook_preprocess_HOOK() for paragraph.
 */
function bcht_preprocess_paragraph(&$variables)
{
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['nid'] = $node->id();
  }
  if ($node = \Drupal::request()->attributes->get('node_preview')) {
    $variables['nid'] = $node->id();
  }
  
  $paragraph = $variables['paragraph'];

  // Check if the paragraph type is 'rich-text'.
  if ($paragraph->bundle() == 'rich_text') {
    $variables['#attached']['library'][] = 'bcht/rich-text';
    $variables['attributes']['class'][] = 'container-small component__wrapper check_next_component';
  }

  // Check if the paragraph type is 'accordion'.
  if ($paragraph->bundle() == 'accordion') {
    $variables['#attached']['library'][] = 'bcht/accordion';
    $variables['attributes']['class'][] = 'container-small component__wrapper';
  }

  // Passing node title in hero interior pages component.
  if ($paragraph->bundle() == 'hero_interior_pages') {
    $parentEntity = $paragraph->getParentEntity();
    if ($parentEntity instanceof NodeInterface) {
      $variables['node_title'] = $parentEntity->getTitle();
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views unformatted template suggestions.
 *
 * @inheritdoc
 */
function bcht_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables)
{
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->id();
}

/**
 *
 * @inheritdoc
 */
function bcht_preprocess_node(&$variables)
{
  $variables['base_path'] = base_path();
}

/**
 * @inheritdoc
 */
function bcht_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if ($form['#id'] == "views-exposed-form-search-block-1") {
    $form['#attributes']['class'][] = "search-form-wrapper";
  }
}
/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bcht_theme_suggestions_paragraph_alter(array &$suggestions, array $variables)
{
  $paragraph = $variables['elements']['#paragraph'];
  $parent_entity = $paragraph->getParentEntity();
  if ($parent_entity->getEntityTypeId() == 'node') {
    // Get the parent node's content type.
    $parent_content_type = $parent_entity->bundle();
    $suggestions[] = 'paragraph__node_'. $parent_content_type . '__' . $paragraph->bundle();;
  }
}

/**
 * Implements hook_page_attachments().
 */
function bcht_page_attachments_alter(array &$attachments) {
  // Get the current URL.
  $current_path = \Drupal::service('path.current')->getPath();
  $current_url = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  // Get configuration URL
  $site_settings =  \Drupal::service('plugin.manager.site_settings_loader')->getActiveLoaderPlugin();
  $lytics_details = $site_settings->loadByGroup('lytics_details');

  // Check the tag is enabled or not
  $site_settings_Lytics_tag =  \Drupal::config('lytics.settings')->get('enable_tag');

  if ($lytics_details) {
    $url_alias = '';
    foreach ($lytics_details as $lytics_detail) {
      if($lytics_detail->get('field_internal_page_link')->getValue()) {
        $internal_path = $lytics_detail->get('field_internal_page_link')->getValue()[0]['uri'];
        $url = Url::fromUri($internal_path);
        $url_alias = $url->toString();
      }
    }
    if ($url_alias === $current_url && $site_settings_Lytics_tag) {
      $lytics_stream_data = '';
      foreach ($lytics_details as $lytics_detail) {
        if($lytics_detail->get('field_lytics_stream_data')->getValue()) {
        $lytics_stream_data = $lytics_detail->get('field_lytics_stream_data')->getValue() [0]['value'];
        }
      }
      $attachments['#attached']['library'][] = 'bcht/lytics';
      $attachments['#attached']['drupalSettings']['lytics_stream_data']['stream_data'] = $lytics_stream_data;
    }
    if ($site_settings_Lytics_tag) {
      $attachments['#attached']['drupalSettings']['lytics']['enabled'] = $site_settings_Lytics_tag;
    }
  }
}

/**
 * Implements template_preprocess_block().
 */
function bcht_preprocess_block(&$variables) {
  $pluginId = $variables['plugin_id'];
  if (explode(':', $pluginId)[0] == 'block_content') {
    /** @var  Drupal\block_content\Entity\BlockContent */
    $blockContent = $variables['content']['#block_content'];
    if ($blockContent->get('type')->getString() == "lytics_cta_button_block") {
      $statusData = $blockContent->get('field_lytics_status_data')->getString();
      // Check the tag is enabled or not.
      $site_settings_Lytics_tag = \Drupal::config('lytics.settings')->get('enable_tag');
      if ($statusData && $site_settings_Lytics_tag) {
        $variables['attributes']['class'][] = 'send-to-lytics';
        $variables['attributes']['data-lytics-status'] = $statusData;
      }
    }
  }
}
