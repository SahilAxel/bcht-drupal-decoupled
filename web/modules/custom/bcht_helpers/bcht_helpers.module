<?php

/**
 * @file
 * Primary module hooks for BCHT Helpers module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 */
function bcht_helpers_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  /* Fetching the card component taxonomy type and content type filter values and
   * passing the fetched values in the exposed filter values of related content view
   */
  if ($view->id() == 'related_content') {
    if (isset($args[0])) {
      $paragraphID = $args[0]->__toString();
      $paragraph = Paragraph::load($paragraphID);
    }

    $exposed_input = $view->getExposedInput();
    if (!empty($paragraph) && $paragraph->getType() == "card") {
      $article_type_tid = "";
      foreach ($paragraph->get('field_article_type')->referencedEntities() as $term) {
        $article_type_tid = $term->id();
      }
      if (!empty($article_type_tid)) {
        $exposed_input['article_type_tid'] = $article_type_tid;
      }

      $category_tid = "";
      foreach ($paragraph->get('field_category')->referencedEntities() as $term) {
        $category_tid = $term->id();
      }
      if (!empty($category_tid)) {
        $exposed_input['category_tid'] = $category_tid;
      }

      $topics_tids = [];
      foreach ($paragraph->get('field_topics')->referencedEntities() as $term) {
        $topics_tids[] = $term->id();
      }
      if (!empty($topics_tids)) {
        $exposed_input['topics_tid'] = $topics_tids;
      }

      $content_type = $paragraph->get('field_content_type')->value;
      if (!empty($content_type)) {
        $exposed_input['content_type'] = $content_type;
      }
    }
    $view->setExposedInput($exposed_input);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function bcht_helpers_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  array_unshift($form['#validate'], 'bcht_helpers_node_form_validate');
  $node = $form_state->getFormObject()->getEntity();
  // Hide publication date field if publication date is not selected.
  if ($node instanceof Node && $node->getType() == "article") {
    if (empty($node->get('field_publication_date')->value)) {
      $form['field_publication_date']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function bcht_helpers_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form_id, ['site_setting_entity_footer_middle_form', 'site_setting_entity_footer_middle_edit_form'])) {
    $form['footer_one'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/footer-one" target="_blank">here</a> to manage the footer one menu links.</p>',
    ];

    $form['footer_two'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/footer-two" target="_blank">here</a> to manage the footer two menu links.</p>',
    ];
  }

  if (in_array($form_id, ['site_setting_entity_header_top_form', 'site_setting_entity_header_top_edit_form'])) {
    $form['utility_menu'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/utitlity-menu" target="_blank">here</a> to manage the utitlity menu links.</p>',
    ];
  }

  if (in_array($form_id, ['site_setting_entity_header_bottom_form', 'site_setting_entity_header_bottom_edit_form'])) {
    $form['main_menu'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/main-navigation" target="_blank">here</a> to manage the main menu links.</p>',
    ];
  }
}

/**
 * Custom node form validate function.
 */
function bcht_helpers_node_form_validate(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node instanceof Node) {
    // Validation for cards component if taxonomy type is not selected then its select field should also be empty.
    if ($node->hasField('field_components')) {
      $card_taxonomy_fields = [
        'article_type' => 'field_article_type',
        'topic' => 'field_topics',
        'categories' => 'field_category',
      ];
      bcht_helpers_taxonomy_type_field_validate($form_state, $node, 'field_components', $card_taxonomy_fields);
    }

    // Validation for cards component(in article content type related content field) if taxonomy type is not selected then its select field should also be empty.
    if ($node->hasField('field_related_content')) {
      $related_taxonomy_fields = [
        'article_type' => 'field_article_type',
        'topic' => 'field_topics',
      ];
      bcht_helpers_taxonomy_type_field_validate($form_state, $node, 'field_related_content', $related_taxonomy_fields);
    }
  }
}

/**
 * Validation for checking if taxonomy type is unchecked in cards paragraph and
 * there is value in the corresponding taxonomy reference field then remove the value from the select field.
 */
function bcht_helpers_taxonomy_type_field_validate(&$form_state, $node, $paragraph_field, $fields) {
  if ($node->hasField($paragraph_field)) {
    $paragraphs = $form_state->getValue($paragraph_field);
    // Loop through all the paragraphs added in the field.
    foreach ($paragraphs as $key => &$paragraph_wrapper) {
      if (isset($paragraph_wrapper['subform'])) {
        $paragraph = $paragraph_wrapper['subform'];
        if (isset($paragraph['field_taxonomy_type'])) {
          $vocabulary_selector = $paragraph['field_taxonomy_type'];
          // Loop through the taxonomy types and respective taxonomy term reference fields and remove the values from taxonomy term field if that taxonomy type is not selected.
          foreach ($fields as $vocab_name => $field_name) {
            if (count($paragraph[$field_name]) > 0 && !in_array($vocab_name, array_column($vocabulary_selector, 'target_id'))) {
              $form_state->setValue([$paragraph_field, $key, 'subform', $field_name], []);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function bcht_helpers_preprocess_node(&$variables) {
  $node = $variables['node'];
  /* Fetching value for eyebrow text to be shown in cards and listing views */
  if ($variables['view_mode'] == "card" || $variables['view_mode'] == "search_result") {
    $nodeType = $node->getType();
    $eyebrowText = "";
    if ($nodeType == 'article') {
      $eyebrowText = bcht_helpers_get_term_name($node, 'field_article_type');
    }
    elseif ($nodeType == 'page' || $nodeType == "landing_page") {
      $eyebrowText = bcht_helpers_get_term_name($node, 'field_categories');
    }
    elseif ($nodeType == 'event') {
      $eyebrowText = "Event";
    }
    elseif ($nodeType == 'listing_page') {
      $eyebrowText == "Listing Page";
    }
    $variables['eyebrow_node'] = $eyebrowText;
  }
}

/**
 * Function for taxonomy term names from node term reference field.
 */
function bcht_helpers_get_term_name($node, $fieldName) {
  $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $termId = $node->get($fieldName)->target_id;
  if ($termId != NULL) {
    return $termStorage->load($termId)->getName();
  }
  return (NULL);
}

/**
 * Implements hook_node_insert().
 */
function bcht_helpers_node_insert(EntityInterface $entity) {
  $firstSentence = "";
  $bodyField = $entity->get('body')->getValue();

  // Updating summary field with first sentence of body field or description text field(article) if the summary is not added.
  if ($entity->getType() == "article") {
    $descriptionField = $entity->get('field_description_text')->getValue();
    // Check that description field is not empty and has value and also summary is empty.
    if (!empty($descriptionField) && isset($descriptionField[0]['value']) && empty($bodyField[0]['summary'])) {
      $descriptionText = strip_tags($descriptionField[0]['value']);
      $descriptionText = html_entity_decode($descriptionText, ENT_QUOTES | ENT_HTML5, 'UTF-8');
      // Fetching the first sentence from the description text string.
      $firstSentence = preg_replace('/(.*?[.?!]).*/', '\\1', $descriptionText);
    }
  }
  else {
    // Check that body field is not empty and has value and also summary is empty.
    if (!empty($bodyField) && isset($bodyField[0]['value']) && empty($bodyField[0]['summary'])) {
      $bodyText = strip_tags($bodyField[0]['value']);
      $bodyText = html_entity_decode($bodyText, ENT_QUOTES | ENT_HTML5, 'UTF-8');
      // Fetching the first sentence from the body text string.
      $firstSentence = preg_replace('/(.*?[.?!]).*/', '\\1', $bodyText);
    }
  }
  // Set the first sentence as summary and save the node.
  if ($firstSentence != "") {
    $bodyField[0]['summary'] = $firstSentence;
    $entity->set('body', $bodyField);
    $entity->save();
  }
}

/**
 * Implements hook_node_presave().
 */
function bcht_helpers_node_presave(EntityInterface $entity) {
  if ($entity->getType() == "article") {

    // Set article publication when article is published for first time.
    if (empty($entity->get('field_publication_date')->getValue()) && ($entity->status->value === TRUE)) {
      $current_time = \Drupal::time()->getCurrentTime();
      $dateTime = \Drupal::service('date.formatter')->format($current_time, 'html_datetime_custom');
      $entity->set('field_publication_date', $dateTime);
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function bcht_helpers_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Check if the entity type is 'paragraph' and the bundle is 'featured_events'.
  if ($entity_type->getBundleEntityType() == "paragraphs_type" && $bundle == 'featured_events') {
    if (isset($fields['field_featured_event_type']) && isset($fields['field_image'])) {
      // Custom validation constraint for image field.
      $fields['field_image']->addConstraint('FeaturedEventImageValidation');
    }
  }
}
