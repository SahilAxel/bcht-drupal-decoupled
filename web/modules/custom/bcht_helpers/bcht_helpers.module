<?php

/**
 * @file
 * Primary module hooks for BCHT Helpers module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;
use Drupal\paragraphs\Entity\Paragraph;

function bcht_helpers_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  /* Fetching the card component taxonomy type and content type filter values and
   * passing the fetched values in the exposed filter values of related content view
   */
  if ($view->id() == 'related_content') {
    if (isset($args[0])) {
      $paragraphID = $args[0]->__toString();
      $paragraph = Paragraph::load($paragraphID);
    }


    $exposed_input = $view->getExposedInput();
    if (!empty($paragraph) && $paragraph->getType() == "card") {
      $article_type_tid = "";
      foreach ($paragraph->get('field_article_type')->referencedEntities() as $term) {
        $article_type_tid = $term->id();
      }
      if (!empty($article_type_tid)) {
        $exposed_input['article_type_tid'] = $article_type_tid;
      }

      $category_tid = "";
      foreach ($paragraph->get('field_category')->referencedEntities() as $term) {
        $category_tid = $term->id();
      }
      if (!empty($category_tid)) {
        $exposed_input['category_tid'] = $category_tid;
      }

      $topics_tids = [];
      foreach ($paragraph->get('field_topics')->referencedEntities() as $term) {
        $topics_tids[] = $term->id();
      }
      if (!empty($topics_tids)) {
        $exposed_input['topics_tid'] = $topics_tids;
      }

      $content_type = $paragraph->get('field_content_type')->value;
      if (!empty($content_type)) {
        $exposed_input['content_type'] = $content_type;
      }
    }
    $view->setExposedInput($exposed_input);
  }
}

function bcht_helpers_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Match any new node or node edit forms.
  if ((preg_match('/node_(.*?)(edit)?_form$/', $form_id))) {
    array_unshift($form['#validate'], 'bcht_helpers_node_form_validate');
  }

  if (in_array($form_id, ['site_setting_entity_footer_middle_form', 'site_setting_entity_footer_middle_edit_form'])) {
    $form['footer_one'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/footer-one" target="_blank">here</a> to manage the footer one menu links.</p>',
    ];

    $form['footer_two'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/footer-two" target="_blank">here</a> to manage the footer two menu links.</p>',
    ];
  }

  if (in_array($form_id, ['site_setting_entity_header_top_form', 'site_setting_entity_header_top_edit_form'])) {
    $form['utility_menu'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/utitlity-menu" target="_blank">here</a> to manage the utitlity menu links.</p>',
    ];
  }

  if (in_array($form_id, ['site_setting_entity_header_bottom_form', 'site_setting_entity_header_bottom_edit_form'])) {
    $form['main_menu'] = [
      '#markup' => '<p>Click <a href="/admin/structure/menu/manage/main-navigation" target="_blank">here</a> to manage the main menu links.</p>',
    ];
  }
}

function bcht_helpers_node_form_validate(&$form, FormStateInterface $form_state) {
  /* Validation for checking if taxonomy type is unchecked and there is value in the
   * corresponding taxonomy reference field then remove the value from the autocomplete field
   */
  $node = $form_state->getFormObject()->getEntity();
  if ($node instanceof Node && $node->hasField('field_components')) {
    $paragraphs = $form_state->getValue('field_components');
    $autocomplete_fields = [
      'article_type' => 'field_article_type',
      'topic' => 'field_topics',
      'categories' => 'field_category',
    ];

    foreach ($paragraphs as $key => &$paragraph_wrapper) {
      if (isset($paragraph_wrapper['subform'])) {
        $paragraph = $paragraph_wrapper['subform'];
        if (isset($paragraph['field_taxonomy_type'])) {
          $vocabulary_selector = $paragraph['field_taxonomy_type'];
          foreach ($autocomplete_fields as $vocab_name => $field_name) {
            if (count($paragraph[$field_name]) > 0 && !in_array($vocab_name, array_column($vocabulary_selector, 'target_id'))) {
              $form_state->setValue(['field_components', $key, 'subform', $field_name], []);
            }
          }
        }
      }
    }
  }

  if ($node instanceof Node && $node->hasField('field_related_content')) {
    $paragraphs = $form_state->getValue('field_related_content');
    $autocomplete_fields = [
      'article_type' => 'field_article_type',
      'topic' => 'field_topics',
    ];

    foreach ($paragraphs as $key => &$paragraph_wrapper) {
      if (isset($paragraph_wrapper['subform'])) {
        $paragraph = $paragraph_wrapper['subform'];
        if (isset($paragraph['field_taxonomy_type'])) {
          $vocabulary_selector = $paragraph['field_taxonomy_type'];
          foreach ($autocomplete_fields as $vocab_name => $field_name) {
            if (count($paragraph[$field_name]) > 0 && !in_array($vocab_name, array_column($vocabulary_selector, 'target_id'))) {
              $form_state->setValue(['field_related_content', $key, 'subform', $field_name], []);
            }
          }
        }
      }
    }
  }
}

function bcht_helpers_preprocess_node(&$variables) {
  $node = $variables['node'];
  /* Fetching value for eyebrow text to be shown in cards and listing views */
  if ($variables['view_mode'] == "card" || $variables['view_mode'] == "search_result") {
    $nodeType = $node->getType();
    $eyebrowText = "";
    if ($nodeType == 'article') {
      $eyebrowText = bcht_helpers_get_term_name($node, 'field_article_type');
    } elseif ($nodeType == 'page' || $nodeType == "landing_page") {
      $eyebrowText = bcht_helpers_get_term_name($node, 'field_categories');
    } elseif ($nodeType == 'event') {
      $eyebrowText = "Event";
    } elseif ($nodeType == 'listing_page') {
      $eyebrowText == "Listing Page";
    }
    $variables['eyebrow_node'] = $eyebrowText;
  }
}

function bcht_helpers_get_term_name($node, $fieldName) {
  $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $termId = $node->get($fieldName)->target_id;
  if ($termId != null) {
    return $termStorage->load($termId)->getName();
  } else {
    return (null);
  }
}

function bcht_helpers_node_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getType() == "article") {
    $timezone = date_default_timezone_get();
    if (empty($entity->get('field_publication_date')->getValue()) && ($entity->status->value == true)) {
      $date = new \DateTime('now', new \DateTimeZone($timezone));
      $entity->set('field_publication_date', $date->format('Y-m-d\TH:i:s'));
    }
  }
}
